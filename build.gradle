plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id "maven-publish"
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id "java-library"
}

group 'dev.redicloud'

version '1.6.10' + getCommitHash() + '-SNAPSHOT'

nexusPublishing {
    repositories {
        rediCloudRepo {
            nexusUrl = uri("https://repo.redicloud.dev/repository/maven-releases/")
            snapshotRepositoryUrl = uri("https://repo.redicloud.dev/repository/maven-snapshots/")
            username = "$System.env.REPO_USER"
            password = "$System.env.REPO_PASSWORD"
        }
    }
}

static def hasRepoAuth() {
    return System.getenv().containsKey('REPO_USER') && System.getenv().containsKey('REPO_PASSWORD')
}

tasks.register('buildAndCopy', Copy) {
    dependsOn projectBuild
    finalizedBy ':copyToTest'
}

tasks.register('copyToTest') {
    project.delete(
            file("${rootDir}/test/node-1/redicloud-node-base.jar"),
            file("${rootDir}/test/node-1/storage/redicloud-plugin-bungeecord.jar"),
            file("${rootDir}/test/node-1/storage/redicloud-plugin-minecraft.jar"),
            file("${rootDir}/test/node-1/storage/redicloud-plugin-velocity.jar"),
            file("${rootDir}/test/node-2/redicloud-runner.jar"),
            file("${rootDir}/test/node-2/storage/redicloud-plugin-bungeecord.jar"),
            file("${rootDir}/test/node-2/storage/redicloud-plugin-minecraft.jar"),
            file("${rootDir}/test/node-2/storage/redicloud-plugin-velocity.jar"),
            file("${rootDir}/test/node-1/storage/versions/redicloud-limbo-server.jar"),
            file("${rootDir}/test/node-2/storage/versions/redicloud-limbo-server.jar"),
            file("${rootDir}/test/node-1/storage/libs/redicloud-dependency-agent.jar"),
            file("${rootDir}/test/node-2/storage/libs/redicloud-dependency-agent.jar")
    )
    dependsOn copyNodeBaseToNode1
    dependsOn copyNodeBaseToNode2
    dependsOn copyMinecraftPluginToNode1
    dependsOn copyMinecraftPluginToNode2
    dependsOn copyProxyPluginToNode1
    dependsOn copyProxyPluginToNode2
    dependsOn copyVelocityPluginToNode1
    dependsOn copyVelocityPluginToNode2
    dependsOn copyLimboServerToNode1
    dependsOn copyLimboServerToNode2
    dependsOn copyNodeRunnerToNode1
    dependsOn copyNodeRunnerToNode2
    dependsOn copyDependencyAgentToNode1
    dependsOn copyDependencyAgentToNode2
}

tasks.register('projectBuild') {
    dependsOn ':commons:build'

    dependsOn ':dependency:dependency-loader:build'
    dependsOn ':dependency:dependency-agent:build'

    dependsOn ':api:api:build'
    dependsOn ':api:api-default-impl:build'

    dependsOn ':module-handler:build'
    dependsOn ':modules:test-module:build'

    dependsOn ':commands:command-locales:build'
    dependsOn ':commands:command-core:build'
    dependsOn ':commands:command-bukkit:build'
    dependsOn ':commands:command-bungeecord:build'

    dependsOn ':api:api-node:build'
    dependsOn ':api:api-minecraft:build'
    dependsOn ':api:api-bungeecord:build'

    dependsOn ':node:node-base:build'
    dependsOn ':node:node-runner:build'

    dependsOn ':plugins:plugin-minecraft:build'
    dependsOn ':plugins:plugin-bungeecord:build'
    dependsOn ':plugins:plugin-velocity:build'

    dependsOn ':limbo-server:build'

}

tasks.register('copyNodeBaseToNode1', Copy) {
    from 'node/node-base/build/libs/redicloud-node-base.jar'
    into 'test/node-1'
}

tasks.register('copyMinecraftPluginToNode1', Copy) {
    from 'plugins/plugin-minecraft/build/libs/redicloud-plugin-minecraft.jar'
    into 'test/node-1/storage'
}

tasks.register('copyProxyPluginToNode1', Copy) {
    from 'plugins/plugin-bungeecord/build/libs/redicloud-plugin-bungeecord.jar'
    into 'test/node-1/storage'
}

tasks.register('copyNodeBaseToNode2', Copy) {
    from 'node/node-base/build/libs/redicloud-node-base.jar'
    into 'test/node-2'
}

tasks.register('copyMinecraftPluginToNode2', Copy) {
    from 'plugins/plugin-minecraft/build/libs/redicloud-plugin-minecraft.jar'
    into 'test/node-2/storage'
}

tasks.register('copyProxyPluginToNode2', Copy) {
    from 'plugins/plugin-bungeecord/build/libs/redicloud-plugin-bungeecord.jar'
    into 'test/node-2/storage'
}
tasks.register('copyVelocityPluginToNode1', Copy) {
    from 'plugins/plugin-velocity/build/libs/redicloud-plugin-velocity.jar'
    into 'test/node-1/storage'
}

tasks.register('copyVelocityPluginToNode2', Copy) {
    from 'plugins/plugin-velocity/build/libs/redicloud-plugin-velocity.jar'
    into 'test/node-2/storage'
}

tasks.register('copyLimboServerToNode1', Copy) {
    from 'limbo-server/build/libs/redicloud-limbo-server.jar'
    into 'test/node-1/storage/versions'
    rename ('redicloud-limbo-server.jar', 'limbo.jar')
}
tasks.register('copyLimboServerToNode2', Copy) {
    from 'limbo-server/build/libs/redicloud-limbo-server.jar'
    into 'test/node-2/storage/versions'
    rename ('redicloud-limbo-server.jar', 'limbo.jar')
}

tasks.register('copyNodeRunnerToNode1', Copy) {
    from 'node/node-runner/build/libs/redicloud-runner.jar'
    into 'test/node-1/'
}

tasks.register('copyNodeRunnerToNode2', Copy) {
    from 'node/node-runner/build/libs/redicloud-runner.jar'
    into 'test/node-2/'
}

tasks.register('copyDependencyAgentToNode1', Copy) {
    from 'dependency/dependency-agent/build/libs/redicloud-dependency-agent.jar'
    into 'test/node-1/storage/libs/'
}

tasks.register('copyDependencyAgentToNode2', Copy) {
    from 'dependency/dependency-agent/build/libs/redicloud-dependency-agent.jar'
    into 'test/node-2/storage/libs/'
}

tasks.register('publishToRepository') {
    dependsOn ':commons:publish'
    dependsOn ':api:api:publish'
    dependsOn ':api:api-default-impl:publish'

    dependsOn ':commands:command-locales:publish'
    dependsOn ':commands:command-core:publish'
    dependsOn ':commands:command-bukkit:publish'
    dependsOn ':commands:command-bungeecord:publish'

    dependsOn ':api:api-node:publish'
    dependsOn ':api:api-minecraft:publish'
    dependsOn ':api:api-bungeecord:publish'

    dependsOn ':node:node-base:publish'
    dependsOn ':node:node-runner:publish'

    dependsOn ':plugins:plugin-minecraft:publish'
    dependsOn ':plugins:plugin-bungeecord:publish'
    dependsOn ':plugins:plugin-velocity:publish'

    dependsOn ':limbo-server:publish'

    dependsOn ':dependency:dependency-loader:publish'
    dependsOn ':dependency:dependency-agent:publish'
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'maven-publish'

    version '1.6.10-' + getCommitHash() + '-SNAPSHOT'

    sourceCompatibility = '1.8'

    compileJava {
        options.encoding = 'UTF-8'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from(components.java)
            }
        }
    }

    repositories {
        mavenCentral()
        maven {
            url = 'https://oss.sonatype.org/content/groups/public/'
        }
        maven {
            url = "https://repo1.maven.org/maven2/"
        }
        maven {
            url = 'https://oss.sonatype.org/content/repositories/snapshots'
        }
        maven {
            url = "https://repo.aikar.co/nexus/content/groups/aikar/"
        }
        maven {
            url = 'https://hub.spigotmc.org/nexus/content/groups/public/'
        }
        maven {
            url = "https://repo1.maven.org/maven2/"
        }
        maven {
            url = "https://jitpack.io"
        }
    }

    dependencies {
        implementation('org.projectlombok:lombok:1.18.24')
        implementation 'de.nycode:bcrypt:2.3.0'
        annotationProcessor('org.projectlombok:lombok:1.18.24')

        implementation('org.redisson:redisson:3.17.5')
        implementation('com.google.guava:guava:31.1-jre')
        implementation('org.jetbrains:annotations:23.0.0')
    }

    task createProperties(dependsOn: processResources) {
        def file = new File("$projectDir/src/main/resources/redicloud.properties")

        def parentFile = file.getParentFile()
        while(!parentFile.exists()) {
            parentFile.mkdirs()
            parentFile = parentFile.getParentFile()
        }
        def version = "version=" + project.version.toString()
        def gitHash = "gitHash=" + getCommitHash()
        def gitBranch = "gitBranch=" + getCurrentBrancheName()
        List<String> props = [version, gitHash, gitBranch]
        file.text = props.join("\n")
    }
}

def isRelease() {
    return project.version.contains('-RELEASE')
}

def getRepoUrl(){
    if(isRelease()){
        return 'https://repo.redicloud.dev/repository/maven-releases/'
    }else{
        return 'https://repo.redicloud.dev/repository/maven-snapshots/'
    }
}

def getCommitHash() {
    def git = new ProcessBuilder('git', 'rev-parse', '--short', getCurrentBrancheName()).directory(project.projectDir).start()
    def inputStream = git.getInputStream();
    def reader = new BufferedReader(new InputStreamReader(inputStream))
    def commitHash = reader.readLine()
    git.waitFor()
    return commitHash
}

def getCurrentBrancheName(){
    def git = new ProcessBuilder('git', 'name-rev', '--name-only', 'HEAD').directory(project.projectDir).start()
    def inputStream = git.getInputStream();
    def reader = new BufferedReader(new InputStreamReader(inputStream))
    def branchName = reader.readLine()
    git.waitFor()
    return branchName
}

classes {
    dependsOn createProperties
}
